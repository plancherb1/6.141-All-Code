#!/usr/bin/env python
import rospy
from std_msgs.msg import Bool
from std_msgs.msg import Float32
from std_msgs.msg import Float64
from std_msgs.msg import Float64MultiArray
from ackermann_msgs.msg import AckermannDriveStamped

flag_move = 0
flag_stop = False

#def detect_stop(data):
#    global flag_stop
#    flag_stop = not len(data.data) == 0
#    print "changed flag_stop to ", flag_stop
    '''if not len(data.data) == 0:
        flag_stop = True
        print "changed flag stop"
    else:
        flag_stop = False
        print "changed flag go"'''

def set_throttle_steer(data):

    global flag_move
    global flag_stop
    pub_vel_left_rear_wheel = rospy.Publisher('/racecar/left_rear_wheel_velocity_controller/command', Float64, queue_size=1)
    pub_vel_right_rear_wheel = rospy.Publisher('/racecar/right_rear_wheel_velocity_controller/command', Float64, queue_size=1)
    pub_vel_left_front_wheel = rospy.Publisher('/racecar/left_front_wheel_velocity_controller/command', Float64, queue_size=1)
    pub_vel_right_front_wheel = rospy.Publisher('/racecar/right_front_wheel_velocity_controller/command', Float64, queue_size=1)

    pub_pos_left_steering_hinge = rospy.Publisher('/racecar/left_steering_hinge_position_controller/command', Float64, queue_size=1)
    pub_pos_right_steering_hinge = rospy.Publisher('/racecar/right_steering_hinge_position_controller/command', Float64, queue_size=1)

    throttle = 0
    steer = 0
    print "flag is ", flag_stop
    if not flag_stop:
        throttle = data.drive.speed/0.1
        steer = data.drive.steering_angle

    print steer, throttle
    print flag_stop
    pub_vel_left_rear_wheel.publish(throttle)
    pub_vel_right_rear_wheel.publish(throttle)
    pub_vel_left_front_wheel.publish(throttle)
    pub_vel_right_front_wheel.publish(throttle)
    pub_pos_left_steering_hinge.publish(steer)
    pub_pos_right_steering_hinge.publish(steer)

def servo_commands():

    rospy.init_node('servo_commands', anonymous=True)

    rospy.Subscriber("vesc/ackermann_cmd_mux/input/teleop", AckermannDriveStamped, set_throttle_steer)
#    rospy.Subscriber("racecar/laser/objdetect", Float64MultiArray, detect_stop)

    # spin() simply keeps python from exiting until this node is stopped
    rospy.spin()

if __name__ == '__main__':
    try:
        servo_commands()
    except rospy.ROSInterruptException:
        pass
